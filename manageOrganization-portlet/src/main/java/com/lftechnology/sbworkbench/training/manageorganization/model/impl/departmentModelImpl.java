package com.lftechnology.sbworkbench.training.manageorganization.model.impl;

import com.lftechnology.sbworkbench.training.manageorganization.model.department;
import com.lftechnology.sbworkbench.training.manageorganization.model.departmentModel;
import com.lftechnology.sbworkbench.training.manageorganization.model.departmentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the department service. Represents a row in the &quot;MO_department&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.lftechnology.sbworkbench.training.manageorganization.model.departmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link departmentImpl}.
 * </p>
 *
 * @author Sanjib Maharjan
 * @see departmentImpl
 * @see com.lftechnology.sbworkbench.training.manageorganization.model.department
 * @see com.lftechnology.sbworkbench.training.manageorganization.model.departmentModel
 * @generated
 */
@JSON(strict = true)
public class departmentModelImpl extends BaseModelImpl<department>
    implements departmentModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a department model instance should use the {@link com.lftechnology.sbworkbench.training.manageorganization.model.department} interface instead.
     */
    public static final String TABLE_NAME = "MO_department";
    public static final Object[][] TABLE_COLUMNS = {
            { "departmentId", Types.BIGINT },
            { "departmentName", Types.VARCHAR },
            { "createdBy", Types.VARCHAR },
            { "createdOn", Types.VARCHAR },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table MO_department (departmentId LONG not null primary key,departmentName VARCHAR(75) null,createdBy VARCHAR(75) null,createdOn VARCHAR(75) null,companyId LONG,groupId LONG)";
    public static final String TABLE_SQL_DROP = "drop table MO_department";
    public static final String ORDER_BY_JPQL = " ORDER BY department.departmentName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY MO_department.departmentName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.lftechnology.sbworkbench.training.manageorganization.model.department"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.lftechnology.sbworkbench.training.manageorganization.model.department"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.lftechnology.sbworkbench.training.manageorganization.model.department"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long DEPARTMENTNAME_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.lftechnology.sbworkbench.training.manageorganization.model.department"));
    private static ClassLoader _classLoader = department.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            department.class
        };
    private long _departmentId;
    private String _departmentName;
    private String _originalDepartmentName;
    private String _createdBy;
    private String _createdOn;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _columnBitmask;
    private department _escapedModel;

    public departmentModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static department toModel(departmentSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        department model = new departmentImpl();

        model.setDepartmentId(soapModel.getDepartmentId());
        model.setDepartmentName(soapModel.getDepartmentName());
        model.setCreatedBy(soapModel.getCreatedBy());
        model.setCreatedOn(soapModel.getCreatedOn());
        model.setCompanyId(soapModel.getCompanyId());
        model.setGroupId(soapModel.getGroupId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<department> toModels(departmentSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<department> models = new ArrayList<department>(soapModels.length);

        for (departmentSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _departmentId;
    }

    public void setPrimaryKey(long primaryKey) {
        setDepartmentId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_departmentId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return department.class;
    }

    public String getModelClassName() {
        return department.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("departmentId", getDepartmentId());
        attributes.put("departmentName", getDepartmentName());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("createdOn", getCreatedOn());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long departmentId = (Long) attributes.get("departmentId");

        if (departmentId != null) {
            setDepartmentId(departmentId);
        }

        String departmentName = (String) attributes.get("departmentName");

        if (departmentName != null) {
            setDepartmentName(departmentName);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        String createdOn = (String) attributes.get("createdOn");

        if (createdOn != null) {
            setCreatedOn(createdOn);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }
    }

    @JSON
    public long getDepartmentId() {
        return _departmentId;
    }

    public void setDepartmentId(long departmentId) {
        _departmentId = departmentId;
    }

    @JSON
    public String getDepartmentName() {
        if (_departmentName == null) {
            return StringPool.BLANK;
        } else {
            return _departmentName;
        }
    }

    public void setDepartmentName(String departmentName) {
        _columnBitmask = -1L;

        if (_originalDepartmentName == null) {
            _originalDepartmentName = _departmentName;
        }

        _departmentName = departmentName;
    }

    public String getOriginalDepartmentName() {
        return GetterUtil.getString(_originalDepartmentName);
    }

    @JSON
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @JSON
    public String getCreatedOn() {
        if (_createdOn == null) {
            return StringPool.BLANK;
        } else {
            return _createdOn;
        }
    }

    public void setCreatedOn(String createdOn) {
        _createdOn = createdOn;
    }

    @JSON
    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            department.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public department toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (department) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    public department toUnescapedModel() {
        return (department) this;
    }

    @Override
    public Object clone() {
        departmentImpl departmentImpl = new departmentImpl();

        departmentImpl.setDepartmentId(getDepartmentId());
        departmentImpl.setDepartmentName(getDepartmentName());
        departmentImpl.setCreatedBy(getCreatedBy());
        departmentImpl.setCreatedOn(getCreatedOn());
        departmentImpl.setCompanyId(getCompanyId());
        departmentImpl.setGroupId(getGroupId());

        departmentImpl.resetOriginalValues();

        return departmentImpl;
    }

    public int compareTo(department department) {
        int value = 0;

        value = getDepartmentName().compareTo(department.getDepartmentName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof department)) {
            return false;
        }

        department department = (department) obj;

        long primaryKey = department.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        departmentModelImpl departmentModelImpl = this;

        departmentModelImpl._originalDepartmentName = departmentModelImpl._departmentName;

        departmentModelImpl._originalCompanyId = departmentModelImpl._companyId;

        departmentModelImpl._setOriginalCompanyId = false;

        departmentModelImpl._originalGroupId = departmentModelImpl._groupId;

        departmentModelImpl._setOriginalGroupId = false;

        departmentModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<department> toCacheModel() {
        departmentCacheModel departmentCacheModel = new departmentCacheModel();

        departmentCacheModel.departmentId = getDepartmentId();

        departmentCacheModel.departmentName = getDepartmentName();

        String departmentName = departmentCacheModel.departmentName;

        if ((departmentName != null) && (departmentName.length() == 0)) {
            departmentCacheModel.departmentName = null;
        }

        departmentCacheModel.createdBy = getCreatedBy();

        String createdBy = departmentCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            departmentCacheModel.createdBy = null;
        }

        departmentCacheModel.createdOn = getCreatedOn();

        String createdOn = departmentCacheModel.createdOn;

        if ((createdOn != null) && (createdOn.length() == 0)) {
            departmentCacheModel.createdOn = null;
        }

        departmentCacheModel.companyId = getCompanyId();

        departmentCacheModel.groupId = getGroupId();

        return departmentCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{departmentId=");
        sb.append(getDepartmentId());
        sb.append(", departmentName=");
        sb.append(getDepartmentName());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", createdOn=");
        sb.append(getCreatedOn());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append(
            "com.lftechnology.sbworkbench.training.manageorganization.model.department");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>departmentId</column-name><column-value><![CDATA[");
        sb.append(getDepartmentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>departmentName</column-name><column-value><![CDATA[");
        sb.append(getDepartmentName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdOn</column-name><column-value><![CDATA[");
        sb.append(getCreatedOn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
